#!/usr/bin/env python3
"""Intervention learning entrypoints."""

from typing import Optional

import click
from pathlib import Path
from loguru import logger
import sys

import intervention.process


@click.group()
@click.option(
    "carla_host",
    "--carla-host",
    envvar="CARLA_HOST",
    show_envvar=True,
    default="localhost",
    type=str,
    help="The Carla simulator hostname to connect to.",
)
@click.option(
    "carla_world_port",
    "--carla-world-port",
    envvar="CARLA_WORLD_PORT",
    show_envvar=True,
    default=2000,
    type=int,
    help="The Carla simulator port to connect to.",
)
def cli(
    carla_host: str, carla_world_port: int,
):
    intervention.process.carla_host = carla_host
    intervention.process.carla_world_port = carla_world_port
    intervention.process.init()


@cli.command()
def manual():
    import intervention.run

    intervention.run.manual()


@cli.command()
def benchmark():
    """
    Test CARLA connectivity and report benchmarking information.
    """
    import intervention.run

    intervention.run.benchmark()


@cli.command()
@click.option(
    "-t",
    "--teacher-checkpoint",
    required=True,
    type=click.Path(exists=True, file_okay=True, dir_okay=False, readable=True),
    help=("The checkpoint to use for the teacher."),
)
@click.option(
    "-n",
    "--num-episodes",
    default=1,
    type=int,
    help="The number of episodes to collect. Terminated episodes also count.",
)
@click.option(
    "-d",
    "--directory",
    default=".",
    type=click.Path(
        exists=False, file_okay=False, dir_okay=True, writable=True, readable=True
    ),
    help=(
        "The directory to write the episodes to. This directory will contain a "
        "top-level file to which summary information is written. If the file exists, "
        "will be appended to. Per-episode data is written to their own subdirectories."
    ),
)
@click.option(
    "device_name",
    "--device",
    default="cuda",
    type=str,
    help=(
        "The device to run on. "
        "See torch's documentation on torch.device for more information."
    ),
)
def collect_teacher_examples(
    teacher_checkpoint: str, num_episodes: int, directory: str, device_name: str,
):
    """
    Collect examples of driving from a teacher agent.
    """
    import torch

    import intervention.collect

    data_path = Path(directory)
    data_path.mkdir(parents=True, exist_ok=True)
    teacher_checkpoint_path = Path(teacher_checkpoint)

    intervention.process.torch_device = torch.device(device_name)

    intervention.collect.collect_example_episodes(
        teacher_checkpoint_path, data_path=data_path, num_episodes=num_episodes,
    )


@cli.command()
@click.option(
    "-s",
    "--student-checkpoint",
    required=True,
    type=click.Path(exists=True, file_okay=True, dir_okay=False, readable=True),
    help=("The checkpoint to use for the student."),
)
@click.option(
    "-t",
    "--teacher-checkpoint",
    required=True,
    type=click.Path(exists=True, file_okay=True, dir_okay=False, readable=True),
    help=("The checkpoint to use for the teacher."),
)
@click.option(
    "-n",
    "--num-episodes",
    default=1,
    type=int,
    help="The number of episodes to collect. Terminated episodes also count.",
)
@click.option(
    "-d",
    "--directory",
    default=".",
    type=click.Path(
        exists=False, file_okay=False, dir_okay=True, writable=True, readable=True
    ),
    help=(
        "The directory to write the episodes to. This directory will contain a "
        "top-level file to which summary information is written. If the file exists, "
        "will be appended to. Per-episode data is written to their own subdirectories."
    ),
)
@click.option(
    "device_name",
    "--device",
    default="cuda",
    type=str,
    help=(
        "The device to run on. "
        "See torch's documentation on torch.device for more information."
    ),
)
def collect_on_policy(
    student_checkpoint: str,
    teacher_checkpoint: str,
    num_episodes: int,
    directory: str,
    device_name: str,
):
    """
    Collect student on-policy driving with interventions from a teacher.
    """
    import torch

    import intervention.collect

    data_path = Path(directory)
    data_path.mkdir(parents=True, exist_ok=True)

    student_checkpoint_path = Path(student_checkpoint)
    teacher_checkpoint_path = Path(teacher_checkpoint)

    intervention.process.torch_device = torch.device(device_name)

    intervention.collect.collect_on_policy_episodes(
        student_checkpoint_path,
        teacher_checkpoint_path,
        data_path=data_path,
        num_episodes=num_episodes,
    )


@cli.command()
@click.option(
    "-t",
    "--teacher-checkpoint",
    required=True,
    type=click.Path(exists=True, file_okay=True, dir_okay=False, readable=True),
    help=("The checkpoint to use for the teacher."),
)
@click.option(
    "device_name",
    "--device",
    default="cuda",
    type=str,
    help=(
        "The device to run on. "
        "See torch's documentation on torch.device for more information."
    ),
)
@click.option(
    "-u",
    "--user-input-planner",
    is_flag=True,
    type=bool,
    help="If set, the user provides route planning through keyboard arrow keys.",
)
def demo_teacher_agent(
    teacher_checkpoint: str, device_name: str, user_input_planner: bool,
):
    """
    Demo driving of a teacher agent.
    """
    import torch

    import intervention.run

    teacher_checkpoint_path = Path(teacher_checkpoint)

    intervention.process.torch_device = torch.device(device_name)

    intervention.run.demo_teacher_agent(teacher_checkpoint_path, user_input_planner)


@cli.command()
def demo_image_agent():
    import intervention.run

    intervention.run.demo_image_agent()


@cli.command()
@click.option(
    "-d",
    "--dataset-directory",
    type=click.Path(
        exists=True, file_okay=False, dir_okay=True, writable=False, readable=True
    ),
    help="The directory of the dataset to train on.",
)
@click.option(
    "-o",
    "--output-directory",
    default=".",
    type=click.Path(
        exists=False, file_okay=False, dir_okay=True, writable=True, readable=True
    ),
    help=("The directory to write the output checkpoints to."),
)
@click.option(
    "-i",
    "--initial-checkpoint",
    required=False,
    type=click.Path(exists=True, file_okay=True, dir_okay=False, readable=True),
    help=("The checkpoint to resume training from."),
)
@click.option(
    "-n",
    "--num-epochs",
    default=5,
    type=int,
    required=False,
    help=("The number of training epochs"),
)
@click.option(
    "device_name",
    "--device",
    default="cuda",
    type=str,
    help=(
        "The device to run on. "
        "See torch's documentation on torch.device for more information."
    ),
)
def train_imitation(
    dataset_directory: str,
    output_directory: str,
    initial_checkpoint: Optional[str],
    device_name: str,
    num_epochs: int,
):
    import torch

    import intervention.train.train

    dataset_path = Path(dataset_directory)

    output_path = Path(output_directory)
    output_path.mkdir(parents=True, exist_ok=True)

    initial_checkpoint_path = Path(initial_checkpoint) if initial_checkpoint else None

    intervention.process.torch_device = torch.device(device_name)

    intervention.train.train.imitation(
        dataset_path,
        output_path,
        initial_checkpoint_path=initial_checkpoint_path,
        epochs=num_epochs,
    )


@cli.command()
@click.option(
    "intervention_dataset_directory",
    "--intervention-dataset-directory",
    type=click.Path(
        exists=True, file_okay=False, dir_okay=True, writable=False, readable=True
    ),
    help="The directory of the intervention dataset to train on.",
)
@click.option(
    "imitation_dataset_directory",
    "--imitation-dataset-directory",
    type=click.Path(
        exists=True, file_okay=False, dir_okay=True, writable=False, readable=True
    ),
    help="The directory of the imitation dataset to train on.",
)
@click.option(
    "-o",
    "--output-directory",
    default=".",
    type=click.Path(
        exists=False, file_okay=False, dir_okay=True, writable=True, readable=True
    ),
    help=("The directory to write the output checkpoints to."),
)
@click.option(
    "-i",
    "--initial-checkpoint",
    required=False,
    type=click.Path(exists=True, file_okay=True, dir_okay=False, readable=True),
    help=("The checkpoint to resume training from."),
)
@click.option(
    "-n",
    "--num-epochs",
    default=5,
    type=int,
    required=False,
    help=("The number of training epochs"),
)
@click.option(
    "device_name",
    "--device",
    default="cuda",
    type=str,
    help=(
        "The device to run on. "
        "See torch's documentation on torch.device for more information."
    ),
)
def train_intervention(
    intervention_dataset_directory: str,
    imitation_dataset_directory: str,
    output_directory: str,
    initial_checkpoint: Optional[str],
    device_name: str,
    num_epochs: int,
):
    import torch

    import intervention.train.train

    intervention_dataset_path = Path(intervention_dataset_directory)
    imitation_dataset_path = Path(imitation_dataset_directory)

    output_path = Path(output_directory)
    output_path.mkdir(parents=True, exist_ok=True)

    initial_checkpoint_path = Path(initial_checkpoint) if initial_checkpoint else None

    intervention.process.torch_device = torch.device(device_name)

    intervention.train.train.intervention(
        intervention_dataset_path,
        imitation_dataset_path,
        output_path,
        initial_checkpoint_path=initial_checkpoint_path,
        epochs=num_epochs,
    )


@cli.command()
@click.option(
    "-d",
    "--dataset-directory",
    type=click.Path(
        exists=True, file_okay=False, dir_okay=True, writable=False, readable=True
    ),
    help="The directory of the dataset to view",
)
def explore_off_policy_dataset(dataset_directory: str,):
    import intervention.run

    dataset_path = Path(dataset_directory)

    intervention.run.explore_off_policy_dataset(dataset_path)

@cli.command()
@click.option(
    "-d",
    "--dataset-directory",
    type=click.Path(
        exists=True, file_okay=False, dir_okay=True, writable=False, readable=True
    ),
    help="The directory of the dataset to calculate metrics for",
)
def on_policy_metrics(dataset_directory: str,):
    import intervention.metrics

    dataset_path = Path(dataset_directory)

    intervention.metrics.on_policy_metrics(sys.stdout, dataset_path)


@cli.command()
def test_pygame():
    from intervention import visualization, process
    import carla

    v = visualization.Visualizer()
    while True:
        with v as painter:
            c = carla.VehicleControl(
                throttle=process.rng.uniform(0, 1.0),
                brake=process.rng.uniform(0, 1.0),
                steer=process.rng.uniform(-1.0, 1.0),
            )
            painter.add_control("test", c)


if __name__ == "__main__":
    logger.remove(handler_id=0)  # Remove default handler.
    logger.add(
        sys.stderr,
        level="TRACE",
        format=(
            "<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green>"
            "| <red>{process.name: <10} {thread.name: <10}</red>"
            "| <level>{level: <8}</level>"
            "| <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan>"
            "- <level>{message}</level>"
        ),
    )

    cli()
